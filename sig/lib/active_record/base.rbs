module ActiveRecord
  class Base
    def self.abstract_class=: (bool) -> void
    def self.scope: (Symbol, ^(*untyped) -> untyped ) -> void
      | (Symbol) { (*untyped) -> untyped } -> void
    def self.belongs_to: (Symbol, ?untyped, **untyped) -> void
    def self.has_many: (Symbol, ?untyped, **untyped) -> void
    def self.has_one: (Symbol, ?untyped, **untyped) -> void
    def self.has_and_belongs_to_many: (untyped name, ?untyped? scope, **untyped options) ?{ () -> untyped } -> untyped
    def self.transaction: [T] () { () -> T } -> T
    def self.create: (**untyped) -> instance
    def self.create!: (**untyped) -> instance
    def self.validate: (*untyped) -> void
    def self.validates: (*untyped) -> void
    def self.enum: (Hash[Symbol, untyped]) -> void
  end
end

